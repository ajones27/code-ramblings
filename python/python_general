# import a module
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# set the maximum number of rows of a dataframe to print
pd.set_option('display.max_rows', 10)

# See files in directory
from subprocess import check_output
print(check_output(["ls", "../my_dir"]).decode("utf8"))

# allow inline plotting in jupyter notebooks
%matplotlib inline

# read a csv (semi colon suppresses output)
df = pd.read_csv("my_file_name.csv");

# view the top 10 lines
df.head(10)

# some summary stats
df.describe()

# aggregate and flatten
count_by_user = df.groupby(by='user_id').count().reset_index()

# group dataframe and perform different aggregations on different columns
grouped = df.groupby(by='user_id')
by_user = grouped.agg({'user_id':'count', 'number_of_actions':'count', 
                       'amount':'mean', 'day_of_week':'mean', 
                       'percentage_of_salary':'std'}).reset_index()
by_user.mean()

# IQR
q75, q25 = np.percentile(df['amount'], [75 ,25])
iqr = q75 - q25

# create a figure that is 50 inches wide, 30 inches tall
fig = plt.figure(figsize=(50, 30)) 
# treat the figure as a set of 6 subplots (2 rows, 3 columns)
subplot1 = fig.add_subplot(2, 3, 1)
subplot2 = fig.add_subplot(2, 3, 2) 

# create some data to plot
import random
random.seed(0)
N = 100
xs = range(N)
y1 = [random.randint(0, 50) for i in xs]
y2 = range(N)

# bar chart in a subplot
subplot.bar(10, 30) # left edge at 10, and the height is 30. 

# can also pass data directly
subplot.bar([10, 20, 30], [5, 8, 2]) # three bars at the x coords 10, 20 and 30, and heights 5, 8 and 2.

# can also customise e.g. 
color='blue'
linewidth=1 # edge of boxes
edgecolor='red' # edge of boxes

# line graph
subplot.plot(xs, ys1, xs, ys2) # shorthand for subplot.plot(xs, y1); subplot.plot(xs, y2)

# customisation e.g.
color='blue'
marker='*'

# boxplot (automatically calculates lowest/highest/quartiles/outliers etc)
boxdata1 = [random.randint(0, 20) for i in xrange(10)]
boxdata2 = [random.randint(20,40) for i in xrange(10)]
boxdata3 = [random.randint(40,60) for i in xrange(10)]
data = [boxdata1, boxdata2, boxdata3]
subplot.boxplot(data)

# customisation e.g.
vert=1
width=None

# scatterplot
subplot.scatter([0, 1, 2], [9, 3, 10]) 

# customisation e.g
s=20 # size of each point
c='blue'
marker='o'
alpha=0 # sets transparency of points from 0 to 1

# additional matplotlib keywords and methods
xerr=[] # list of floats to specify error bars
yerr=[]
subplot.loglog(xs, ys) # draw line on a log-log plot
subplot.semilogx(xs, ys) # draw x-axis on a log plot
subplot.semilogy(xs, ys) # draw y-axis on a log plot
subplot.text(x, y, text) # write text at coordinates (x,y)
subplot.clear() # clear everything on the subplot
subplot.legend(loc='upper center', ncol=2)
subplot.set_title(text) # set title of the plot
subplot.set_xlabel(text) # set xlabel of the plot
subplot.set_xticks(xs) # draw x-axis tick marks
subplot.set_xticklabels(texts) # draw labels at tick marks
subplot.set_xscale(scale) # draw x-scale. scale is 'linear' or 'log'
subplot.set_xlim(xmin, xmax)

# histogram
plt.hist(df['amount'], bins=16)
plt.title("distribution of amount"), plt.xlabel("amount"), plt.ylabel("count")

# read a json file as a dictionary
import json
path = 'ch02/usagov_bitly_data2012-03-16-1331923249.txt'
records = [json.loads(line) for line in open(path)]

# access an element of the first dictionary in the array
records[0]['tz'] # -> u'America/New_York'

# access a particular key for all sub-dictionaries in the array
time_zones = [rec['tz'] for rec in records if 'tz' in rec]

# count and return the top 10
from collections import Counter
counts = Counter(time_zones)
counts.most_common(10)

# same count in pandas
frame = pd.DataFrame(records)
tz_counts = frame['tz'].value_counts()
tz_counts[:10]

# fill in nulls and blanks
clean_tz = frame['tz'].fillna('Missing')
clean_tz[clean_tz == ''] = 'Unknown'
tz_counts = clean_tz.value_counts()

# plot top 10 values
tz_counts[:10].plot(kind='barh', rot=0)

# ignore nulls
cframe = frame[frame.a.notnull()]

# select where the string contains the word "Windows". Set this value to be "windows", otherwise "not windows"
operating_system = np.where(cframe['a'].str.contains('Windows'), 'Windows', 'Not Windows')

# group the table by timezone ("tz") and this new list of OS. Count them and fill the blanks with 0
by_tz_os = cframe.groupby(['tz', operating_system])
agg_counts = by_tz_os.size().unstack().fillna(0)

# find top 10 overall timezones (ignoring OS now)
indexer = agg_counts.sum(1).argsort() # creates an index for the ordering in terms of the sum of timezones across OS
count_subset = agg_counts.take(indexer)[-10:] # uses that indexer to take the top 10

# plot it as a stacked bar chart
count_subset.plot(kind='barh', stacked=True)

# to normalise it and plot it again
normed_subset = count_subset.div(count_subset.sum(1), axis=0)
normed_subset.plot(kind='barh', stacked=True)

# Movielens data set, we can load the tables with read_table, providing column names
# users
unames = ['user_id', 'gender', 'age', 'occupation', 'zip']
users = pd.read_table('ml-1m/users.dat', sep='::', header=None, names=unames)

# ratings
rnames = ['user_id', 'movie_id', 'rating', 'timestamp']
ratings = pd.read_table('ml-1m/ratings.dat', sep='::', header=None, names=rnames)

# movies
mnames = ['movie_id', 'title', 'genres']
movies = pd.read_table('ml-1m/movies.dat', sep='::', header=None, names=mnames)

# see a preview of the first 5 rows
users[:5]
users.head(5)

# merge the tables together
data = pd.merge(pd.merge(ratings, users), movies)

# mean movie ratings by gender
mean_ratings = data.pivot_table('rating', rows='title', cols='gender', aggfunc='mean')

# count the number of ratings per title
ratings_by_title = data.groupby('title').size()

# filter out by removing movies with less than 250 ratings
active_titles = ratings_by_title.index[ratings_by_title >= 250]

# now filter the mean ratings by those with at least 250 reviews
mean_ratings = mean_ratings.ix[active_titles]

# see top movies for females
top_female_ratings = mean_ratings.sort_index(by='F', ascending=False)

# add a new column with the difference between male and female ratings and sort
mean_ratings['diff'] = mean_ratings['M'] - mean_ratings['F']
sorted_by_diff = mean_ratings.sort_index(by='diff')

# reverse the order and slice the top 15 rows
sorted_by_diff[::-1][:15]

# standard deviation of the rating by title and filter by active titles
rating_std_by_title = data.groupby('title')['rating'].std()
rating_std_by_title = rating_std_by_title.ix[active_titles]

# list the top 10
rating_std_by_title.order(ascending=False)[:10]
